const fs = require('fs');

function deValue1(base, value) {
    return parseInt(value, base);
}
function Mean(arr) {
    const sum = arr.reduce((acc, val) => acc + val, 0);
    return sum / arr.length;
}

function StandardDeviation(arr, mean) {
    const variance = arr.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / arr.length;
    return Math.sqrt(variance);
}


function detectOutliers(points) {
    const yValues = points.map(point => point.y);

    // Calculate mean and standard deviation of y-values
    const mean = Mean(yValues);
    const stdDev = StandardDeviation(yValues, mean);

    // Threshold for outlier detection
    const threshold = 2;

    // Filter points that are considered outliers
    return points.filter(point => Math.abs(point.y - mean) > threshold * stdDev);
}


function findOutliersFromFile(filename) {
    fs.readFile(filename, 'utf8', (err, data) => {
        if (err) {
            console.error("Error reading file:", err.message);
            return;
        }

        try {
            const jsonData = JSON.parse(data);
            const { n, k } = jsonData.keys;

            let points = [];

            // Parse and decode the points from the JSON data
            Object.keys(jsonData).forEach(key => {
                if (key !== 'keys') {
                    const base = parseInt(jsonData[key].base);
                    const value = jsonData[key].value;
                    const x = parseInt(key); // The x-coordinate is the object key
                    const y = deValue(base, value); // Decode the y-coordinate

                    points.push({ x, y });
                }
            });

            // Detect outliers in the dataset
            const outliers = detectOutliers(points);

            console.log("Outliers detected:", outliers);
        } catch (parseError) {
            console.error("Error parsing JSON data:", parseError.message);
        }
    });
}

// Execute the function with the specified JSON file
findOutliersFromFile('testcase2.json');
